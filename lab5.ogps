/* Modelling of multi-processor system */

fac CPUs[3];
fac RAM;
int cur_p1 = 1;
mark ALLCPUS;

function CPUs_wait(cpuid) {
                           cpuid == 1 -> cpu1_distr() |
                           cpuid == 2 -> 8 + random_int(-3, 3) |
                           cpuid == 3 -> cpu3_xactid_distr()
                          };

function cpu1_distr() {
                       random01() < 0.3 -> 5 |
                       random01() < 0.5 -> 2 |
                       1 -> 7
                      };
                      
function cpu3_xactid_distr() {
                         xact.p1 == 1 -> 5 |
                         xact.p1 == 2 -> 10 |
                         xact.p1 == 3 -> 15
                        };
                        
function ram_distr(cpuid) {
                           cpuid == 1 -> ram1_distr(random01()) |
                           cpuid == 2 -> ram2_distr(random01()) |
                           cpuid == 3 -> 3
                          };
                        
function ram1_distr(prob) { prob < 0.3 -> 3 | 1 -> 6 };
                          
function ram2_distr(prob) { prob < 0.2 -> 2 | 1 -> 4 };

exitwhen(curticks == 1000);
{{
inject("CPU1", 0, 0, 0, 5) { priority = 10, id = 1 };
->> ALLCPUS;
inject("CPU2", 0, 0, 0, 6) { priority = 20, id = 2 };
->> ALLCPUS;
inject("CPU3", 0, 0, 0, 3) { priority = 30, id = 3, p1 = 0 };
xact.p1 = cur_p1;
cur_p1++;

// CPUs parametric modelling
ALLCPUS: fac_enter(CPUs[xact.id - 1]);
wait(CPUs_wait(xact.id));
fac_leave(CPUs[xact.id - 1]);

// RAM modelling
fac_enter(RAM);
wait(ram_distr(xact.id));
fac_leave(RAM);
->> ALLCPUS;
}}
